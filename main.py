import logging
import asyncio
import sys
import os
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, filters
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import ContextTypes

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å Python
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO,
    handlers=[
        logging.StreamHandler(sys.stdout),
        logging.FileHandler('bot.log')
    ]
)
logger = logging.getLogger(__name__)

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à–∏ –º–æ–¥—É–ª–∏
from config import BOT_TOKEN
from database import init_db, add_song, get_user_songs, delete_song, get_song_videos, add_video, get_video_exists
from tiktok_parser import process_song_link, check_new_videos_for_user, start_periodic_checking

def get_main_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üéµ –î–æ–±–∞–≤–∏—Ç—å –ø–µ—Å–Ω—é –ø–æ —Å—Å—ã–ª–∫–µ", callback_data="add_song")],
        [InlineKeyboardButton("üìã –ú–æ–∏ –ø–µ—Å–Ω–∏", callback_data="list_songs")],
        [InlineKeyboardButton("üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–µ–π—á–∞—Å", callback_data="check_now")],
        [InlineKeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data="help")]
    ])

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    try:
        user = update.effective_user
        welcome_text = f"""
üëã –ü—Ä–∏–≤–µ—Ç, {user.first_name}!

üéµ –Ø –±–æ—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –Ω–æ–≤—ã—Ö –≤–∏–¥–µ–æ —Å —Ç–≤–æ–∏–º–∏ –ø–µ—Å–Ω—è–º–∏ –≤ TikTok.

üìã –ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:
1. –ü—Ä–∏—Å—ã–ª–∞–µ—à—å –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ –ø–µ—Å–Ω—é –≤ TikTok
2. –Ø –Ω–∞—Ö–æ–∂—É –≤—Å–µ –≤–∏–¥–µ–æ —Å —ç—Ç–æ–π –ø–µ—Å–Ω–µ–π
3. –ü—Ä–∏—Å—ã–ª–∞—é —Ç–µ–±–µ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –≤–∏–¥–µ–æ
4. –ü–æ—Å—Ç–æ—è–Ω–Ω–æ –∏—â—É –Ω–æ–≤—ã–µ –∏ –ø—Ä–∏—Å—ã–ª–∞—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è

üì± –ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:
    """
        
        keyboard = get_main_keyboard()
        
        if update.message:
            await update.message.reply_text(welcome_text, reply_markup=keyboard)
        else:
            await update.callback_query.message.reply_text(welcome_text, reply_markup=keyboard)
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /start: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def handle_menu_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –æ—Ç –∫–Ω–æ–ø–æ–∫"""
    try:
        query = update.callback_query
        await query.answer()
        
        data = query.data
        
        if data == "main_menu":
            await main_menu(update, context)
        
        elif data == "add_song":
            await add_song_handler(update, context)
        
        elif data == "list_songs":
            await list_songs_handler(update, context)
        
        elif data == "check_now":
            await check_now_handler(update, context)
        
        elif data == "help":
            await help_handler(update, context)
        
        elif data.startswith("delete_song:"):
            await delete_song_handler(update, context)
        
        elif data.startswith("show_videos:"):
            await show_videos_handler(update, context)
        
        elif data == "back_to_songs":
            await list_songs_handler(update, context)
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback: {e}")

async def main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏"""
    text = "üì± –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:"
    await update.callback_query.message.edit_text(text, reply_markup=get_main_keyboard())

async def add_song_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–µ—Å–Ω–∏"""
    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="main_menu")]
    ])
    
    text = "üéµ –ü—Ä–∏—à–ª–∏ –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ –ø–µ—Å–Ω—é –≤ TikTok\n\n–ü—Ä–∏–º–µ—Ä:\nhttps://www.tiktok.com/music/–Ω–∞–∑–≤–∞–Ω–∏–µ-–ø–µ—Å–Ω–∏-723415689123"
    await update.callback_query.message.edit_text(text, reply_markup=keyboard)

async def list_songs_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–ø–∏—Å–∫–∞ –ø–µ—Å–µ–Ω"""
    try:
        user_id = update.effective_user.id
        songs = get_user_songs(user_id)
        
        if not songs:
            keyboard = InlineKeyboardMarkup([
                [InlineKeyboardButton("üéµ –î–æ–±–∞–≤–∏—Ç—å –ø–µ—Å–Ω—é", callback_data="add_song")],
                [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="main_menu")]
            ])
            await update.callback_query.message.edit_text(
                "üìã –£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –ø–µ—Å–µ–Ω.", 
                reply_markup=keyboard
            )
            return
        
        text = "üìã –¢–≤–æ–∏ –ø–µ—Å–Ω–∏:\n\n"
        keyboard_buttons = []
        
        for song in songs:
            song_id, name, song_url, created_at = song
            text += f"üéµ {name}\nüîó {song_url}\nüìÖ –î–æ–±–∞–≤–ª–µ–Ω–∞: {created_at[:10]}\n\n"
            
            keyboard_buttons.append([
                InlineKeyboardButton(f"üìπ –í–∏–¥–µ–æ {name}", callback_data=f"show_videos:{song_id}"),
                InlineKeyboardButton(f"‚ùå –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_song:{song_id}")
            ])
        
        keyboard_buttons.append([InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="main_menu")])
        keyboard = InlineKeyboardMarkup(keyboard_buttons)
        
        await update.callback_query.message.edit_text(text, reply_markup=keyboard)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —Å–ø–∏—Å–∫–∞ –ø–µ—Å–µ–Ω: {e}")

async def show_videos_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤–∏–¥–µ–æ –¥–ª—è –ø–µ—Å–Ω–∏"""
    try:
        query = update.callback_query
        song_id = int(query.data.split(":")[1])
        user_id = update.effective_user.id
        
        videos = get_song_videos(song_id, user_id)
        
        if not videos:
            text = "üì≠ –í–∏–¥–µ–æ –¥–ª—è —ç—Ç–æ–π –ø–µ—Å–Ω–∏ –ø–æ–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."
        else:
            text = "üé¨ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –≤–∏–¥–µ–æ:\n\n"
            for i, video in enumerate(videos[:5], 1):
                video_id, video_url, description, created_at = video
                text += f"{i}. {description}\n"
                text += f"üîó [–°–º–æ—Ç—Ä–µ—Ç—å –≤–∏–¥–µ–æ]({video_url})\n"
                text += f"üìÖ {created_at[:10]}\n\n"
        
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("‚Ü©Ô∏è –ö —Å–ø–∏—Å–∫—É –ø–µ—Å–µ–Ω", callback_data="list_songs")],
            [InlineKeyboardButton("‚Ü©Ô∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ])
        
        await query.edit_message_text(text, reply_markup=keyboard, parse_mode='Markdown')
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –≤–∏–¥–µ–æ: {e}")

async def delete_song_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è –ø–µ—Å–Ω–∏"""
    try:
        query = update.callback_query
        song_id = int(query.data.split(":")[1])
        user_id = update.effective_user.id
        
        delete_song(song_id, user_id)
        
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("üìã –ö —Å–ø–∏—Å–∫—É –ø–µ—Å–µ–Ω", callback_data="list_songs")],
            [InlineKeyboardButton("‚Ü©Ô∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ])
        
        await query.edit_message_text("‚úÖ –ü–µ—Å–Ω—è —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!", reply_markup=keyboard)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–µ—Å–Ω–∏: {e}")

async def check_now_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–∏–¥–µ–æ"""
    try:
        query = update.callback_query
        user_id = update.effective_user.id
        
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="check_now")],
            [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="main_menu")]
        ])
        
        await query.edit_message_text("üîç –ò—â—É –Ω–æ–≤—ã–µ –≤–∏–¥–µ–æ...", reply_markup=keyboard)
        
        new_videos = await check_new_videos_for_user(user_id)
        
        if not new_videos:
            text = "üì≠ –ù–æ–≤—ã—Ö –≤–∏–¥–µ–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."
        else:
            text = "üéâ –ù–∞–π–¥–µ–Ω—ã –Ω–æ–≤—ã–µ –≤–∏–¥–µ–æ!\n\n"
            for video in new_videos[:5]:
                text += f"üéµ {video['song_name']}\n"
                text += f"üìπ {video['description']}\n"
                text += f"üîó [–°–º–æ—Ç—Ä–µ—Ç—å –≤–∏–¥–µ–æ]({video['video_url']})\n\n"
            
            if len(new_videos) > 5:
                text += f"–ò –µ—â—ë {len(new_videos) - 5} –≤–∏–¥–µ–æ...\n"
        
        await query.edit_message_text(text, reply_markup=keyboard, parse_mode='Markdown')
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–∏–¥–µ–æ: {e}")

async def help_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–º–æ—â–∏"""
    help_text = """
‚ÑπÔ∏è *–ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É*

üéµ *–ö–∞–∫ –¥–æ–±–∞–≤–∏—Ç—å –ø–µ—Å–Ω—é*:
1. –ù–∞–π–¥–∏ –ø–µ—Å–Ω—é –≤ TikTok
2. –°–∫–æ–ø–∏—Ä—É–π —Å—Å—ã–ª–∫—É –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–µ—Å–Ω–∏
3. –ü—Ä–∏—à–ª–∏ —Å—Å—ã–ª–∫—É –±–æ—Ç—É

–ü—Ä–∏–º–µ—Ä—ã —Å—Å—ã–ª–æ–∫:
‚Ä¢ https://www.tiktok.com/music/–Ω–∞–∑–≤–∞–Ω–∏–µ-–ø–µ—Å–Ω–∏-723415689123

üìπ *–ß—Ç–æ –¥–µ–ª–∞–µ—Ç –±–æ—Ç*:
- –ù–∞—Ö–æ–¥–∏—Ç –≤—Å–µ –≤–∏–¥–µ–æ —Å —ç—Ç–æ–π –ø–µ—Å–Ω–µ–π
- –°–æ—Ä—Ç–∏—Ä—É–µ—Ç –ø–æ –¥–∞—Ç–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
- –ü—Ä–∏—Å—ã–ª–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ –≤–∏–¥–µ–æ
- –ü–æ—Å—Ç–æ—è–Ω–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–æ–≤—ã–µ –≤–∏–¥–µ–æ

üí° *–°–æ–≤–µ—Ç—ã*:
- –ò—Å–ø–æ–ª—å–∑—É–π –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –ø–µ—Å–Ω–∏ –∏–∑ TikTok
- –ù–æ–≤—ã–µ –≤–∏–¥–µ–æ –ø—Ä–æ–≤–µ—Ä—è—é—Ç—Å—è –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç
    """
    
    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="main_menu")]
    ])
    
    await update.callback_query.message.edit_text(
        help_text, 
        reply_markup=keyboard, 
        parse_mode='Markdown'
    )

async def handle_text_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    try:
        text = update.message.text.strip()
        
        if text.startswith(('https://www.tiktok.com/music/', 'https://vm.tiktok.com/', 'https://tiktok.com/music/')):
            await handle_song_link(update, context, text)
        else:
            await update.message.reply_text(
                "üìé –ü—Ä–∏—à–ª–∏ –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ –ø–µ—Å–Ω—é –≤ TikTok –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è\n\n–ü—Ä–∏–º–µ—Ä: https://www.tiktok.com/music/–Ω–∞–∑–≤–∞–Ω–∏–µ-–ø–µ—Å–Ω–∏-723415689123",
                reply_markup=get_main_keyboard()
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

async def handle_song_link(update: Update, context: ContextTypes.DEFAULT_TYPE, link: str):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Å—ã–ª–∫–∏ –Ω–∞ –ø–µ—Å–Ω—é"""
    try:
        await update.message.reply_text("üîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Å—Å—ã–ª–∫—É –Ω–∞ –ø–µ—Å–Ω—é...")
        
        success, message = await process_song_link(update.effective_user.id, link)
        
        if success:
            keyboard = get_main_keyboard()
            await update.message.reply_text(message, reply_markup=keyboard)
        else:
            keyboard = get_main_keyboard()
            await update.message.reply_text(f"‚ùå {message}", reply_markup=keyboard)
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Å—ã–ª–∫–∏: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Å—ã–ª–∫–∏.")

async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
    logger.error("Exception while handling an update:", exc_info=context.error)

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    try:
        logger.info("–ó–∞–ø—É—Å–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞...")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞
        if not BOT_TOKEN or BOT_TOKEN == "your_bot_token_here":
            logger.error("BOT_TOKEN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª .env")
            return
            
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        init_db()
        logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        application = Application.builder().token(BOT_TOKEN).build()
        logger.info("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ")
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        application.add_handler(CommandHandler("start", start))
        application.add_handler(CallbackQueryHandler(handle_menu_callback))
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text_message))
        
        # –ó–∞–ø—É—Å–∫ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
        start_periodic_checking(application)
        logger.info("–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞")
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
        application.add_error_handler(error_handler)
        
        # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
        logger.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
        application.run_polling()
        
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")

if __name__ == "__main__":
    main()
