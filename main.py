import logging
import asyncio
import sys
import os
import time
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, filters
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import ContextTypes
import sqlite3
import requests
from bs4 import BeautifulSoup
from apscheduler.schedulers.background import BackgroundScheduler
from apscheduler.triggers.interval import IntervalTrigger
from dotenv import load_dotenv

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO,
    handlers=[
        logging.StreamHandler(sys.stdout),
        logging.FileHandler('/app/bot.log' if os.path.exists('/.dockerenv') else 'bot.log')
    ]
)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

BOT_TOKEN = os.getenv('BOT_TOKEN')
CHECK_INTERVAL = int(os.getenv('CHECK_INTERVAL', '1800'))
DB_PATH = os.getenv('DB_PATH', 'database/tiktok_bot.db')

# ========== –ë–ê–ó–ê –î–ê–ù–ù–´–• ==========

def init_db():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    try:
        os.makedirs(os.path.dirname(DB_PATH), exist_ok=True)
        conn = sqlite3.connect(DB_PATH)
        cursor = conn.cursor()
        
        cursor.execute('''
        CREATE TABLE IF NOT EXISTS songs (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER NOT NULL,
            name TEXT NOT NULL,
            song_url TEXT NOT NULL UNIQUE,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
        ''')
        
        cursor.execute('''
        CREATE TABLE IF NOT EXISTS videos (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            song_id INTEGER NOT NULL,
            video_url TEXT NOT NULL UNIQUE,
            description TEXT,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
        ''')
        
        conn.commit()
        conn.close()
        logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: {e}")

def add_song(user_id, name, song_url):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Å–Ω–∏ –≤ –±–∞–∑—É"""
    try:
        conn = sqlite3.connect(DB_PATH)
        cursor = conn.cursor()
        
        cursor.execute(
            'INSERT OR IGNORE INTO songs (user_id, name, song_url) VALUES (?, ?, ?)',
            (user_id, name, song_url)
        )
        
        conn.commit()
        
        # –ü–æ–ª—É—á–∞–µ–º ID
        cursor.execute(
            'SELECT id FROM songs WHERE song_url = ? AND user_id = ?',
            (song_url, user_id)
        )
        result = cursor.fetchone()
        song_id = result[0] if result else None
        
        conn.close()
        
        is_new = cursor.rowcount > 0
        return song_id, is_new
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–µ—Å–Ω–∏: {e}")
        return None, False

def get_user_songs(user_id):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–µ—Å–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        conn = sqlite3.connect(DB_PATH)
        cursor = conn.cursor()
        
        cursor.execute(
            'SELECT id, name, song_url, created_at FROM songs WHERE user_id = ? ORDER BY created_at DESC',
            (user_id,)
        )
        
        songs = cursor.fetchall()
        conn.close()
        return songs
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–µ—Å–µ–Ω: {e}")
        return []

def get_song_videos(song_id, user_id):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤–∏–¥–µ–æ –¥–ª—è –ø–µ—Å–Ω–∏"""
    try:
        conn = sqlite3.connect(DB_PATH)
        cursor = conn.cursor()
        
        cursor.execute(
            '''SELECT v.id, v.video_url, v.description, v.created_at 
               FROM videos v 
               JOIN songs s ON v.song_id = s.id 
               WHERE s.id = ? AND s.user_id = ? 
               ORDER BY v.created_at DESC 
               LIMIT 20''',
            (song_id, user_id)
        )
        
        videos = cursor.fetchall()
        conn.close()
        return videos
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤–∏–¥–µ–æ: {e}")
        return []

def delete_song(song_id, user_id):
    """–£–¥–∞–ª–µ–Ω–∏–µ –ø–µ—Å–Ω–∏"""
    try:
        conn = sqlite3.connect(DB_PATH)
        cursor = conn.cursor()
        
        cursor.execute('DELETE FROM videos WHERE song_id = ?', (song_id,))
        cursor.execute('DELETE FROM songs WHERE id = ? AND user_id = ?', (song_id, user_id))
        
        conn.commit()
        conn.close()
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–µ—Å–Ω–∏: {e}")
        return False

def add_video(song_id, video_url, description):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–∏–¥–µ–æ –≤ –±–∞–∑—É"""
    try:
        conn = sqlite3.connect(DB_PATH)
        cursor = conn.cursor()
        
        cursor.execute(
            'INSERT OR IGNORE INTO videos (song_id, video_url, description) VALUES (?, ?, ?)',
            (song_id, video_url, description)
        )
        
        conn.commit()
        conn.close()
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤–∏–¥–µ–æ: {e}")
        return False

def get_video_exists(video_url):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –≤–∏–¥–µ–æ"""
    try:
        conn = sqlite3.connect(DB_PATH)
        cursor = conn.cursor()
        
        cursor.execute('SELECT id FROM videos WHERE video_url = ?', (video_url,))
        exists = cursor.fetchone() is not None
        conn.close()
        
        return exists
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–∏–¥–µ–æ: {e}")
        return False

# ========== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ë–û–¢–ê ==========

def get_main_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üéµ –î–æ–±–∞–≤–∏—Ç—å –ø–µ—Å–Ω—é –ø–æ —Å—Å—ã–ª–∫–µ", callback_data="add_song")],
        [InlineKeyboardButton("üìã –ú–æ–∏ –ø–µ—Å–Ω–∏", callback_data="list_songs")],
        [InlineKeyboardButton("üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–µ–π—á–∞—Å", callback_data="check_now")],
        [InlineKeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data="help")]
    ])

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    try:
        user = update.effective_user
        
        if not BOT_TOKEN or BOT_TOKEN == "your_bot_token_here":
            await update.message.reply_text("‚ùå –ë–æ—Ç –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
            return
            
        welcome_text = f"""
üëã –ü—Ä–∏–≤–µ—Ç, {user.first_name}!

üéµ –Ø –±–æ—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –Ω–æ–≤—ã—Ö –≤–∏–¥–µ–æ —Å —Ç–≤–æ–∏–º–∏ –ø–µ—Å–Ω—è–º–∏ –≤ TikTok.

üì± –ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:
    """
        
        keyboard = get_main_keyboard()
        await update.message.reply_text(welcome_text, reply_markup=keyboard)
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /start: {e}")

async def handle_menu_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –æ—Ç –∫–Ω–æ–ø–æ–∫"""
    try:
        query = update.callback_query
        await query.answer()
        
        data = query.data
        
        if data == "main_menu":
            await main_menu(update, context)
        elif data == "add_song":
            await add_song_handler(update, context)
        elif data == "list_songs":
            await list_songs_handler(update, context)
        elif data == "check_now":
            await check_now_handler(update, context)
        elif data == "help":
            await help_handler(update, context)
        elif data.startswith("delete_song:"):
            await delete_song_handler(update, context)
        elif data.startswith("show_videos:"):
            await show_videos_handler(update, context)
        elif data == "back_to_songs":
            await list_songs_handler(update, context)
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback: {e}")

async def main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    text = "üì± –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:"
    await update.callback_query.message.edit_text(text, reply_markup=get_main_keyboard())

async def add_song_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Å–Ω–∏"""
    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="main_menu")]
    ])
    
    text = "üéµ –ü—Ä–∏—à–ª–∏ –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ –ø–µ—Å–Ω—é –≤ TikTok\n\n–ü—Ä–∏–º–µ—Ä:\nhttps://www.tiktok.com/music/–Ω–∞–∑–≤–∞–Ω–∏–µ-–ø–µ—Å–Ω–∏-723415689123"
    await update.callback_query.message.edit_text(text, reply_markup=keyboard)

async def list_songs_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–ø–∏—Å–æ–∫ –ø–µ—Å–µ–Ω"""
    try:
        user_id = update.effective_user.id
        songs = get_user_songs(user_id)
        
        if not songs:
            keyboard = InlineKeyboardMarkup([
                [InlineKeyboardButton("üéµ –î–æ–±–∞–≤–∏—Ç—å –ø–µ—Å–Ω—é", callback_data="add_song")],
                [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="main_menu")]
            ])
            await update.callback_query.message.edit_text("üìã –£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –ø–µ—Å–µ–Ω.", reply_markup=keyboard)
            return
        
        text = "üìã –¢–≤–æ–∏ –ø–µ—Å–Ω–∏:\n\n"
        keyboard_buttons = []
        
        for song in songs:
            song_id, name, song_url, created_at = song
            text += f"üéµ {name}\nüîó {song_url}\nüìÖ –î–æ–±–∞–≤–ª–µ–Ω–∞: {created_at[:10]}\n\n"
            
            keyboard_buttons.append([
                InlineKeyboardButton(f"üìπ –í–∏–¥–µ–æ {name}", callback_data=f"show_videos:{song_id}"),
                InlineKeyboardButton(f"‚ùå –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_song:{song_id}")
            ])
        
        keyboard_buttons.append([InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="main_menu")])
        keyboard = InlineKeyboardMarkup(keyboard_buttons)
        
        await update.callback_query.message.edit_text(text, reply_markup=keyboard)
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —Å–ø–∏—Å–∫–∞ –ø–µ—Å–µ–Ω: {e}")

async def show_videos_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤–∏–¥–µ–æ"""
    try:
        query = update.callback_query
        song_id = int(query.data.split(":")[1])
        user_id = update.effective_user.id
        
        videos = get_song_videos(song_id, user_id)
        
        if not videos:
            text = "üì≠ –í–∏–¥–µ–æ –¥–ª—è —ç—Ç–æ–π –ø–µ—Å–Ω–∏ –ø–æ–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."
        else:
            text = "üé¨ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –≤–∏–¥–µ–æ:\n\n"
            for i, video in enumerate(videos[:5], 1):
                video_id, video_url, description, created_at = video
                text += f"{i}. {description}\nüîó [–°–º–æ—Ç—Ä–µ—Ç—å –≤–∏–¥–µ–æ]({video_url})\nüìÖ {created_at[:10]}\n\n"
        
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("‚Ü©Ô∏è –ö —Å–ø–∏—Å–∫—É –ø–µ—Å–µ–Ω", callback_data="list_songs")],
            [InlineKeyboardButton("‚Ü©Ô∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ])
        
        await query.edit_message_text(text, reply_markup=keyboard, parse_mode='Markdown')
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –≤–∏–¥–µ–æ: {e}")

async def delete_song_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–£–¥–∞–ª–µ–Ω–∏–µ –ø–µ—Å–Ω–∏"""
    try:
        query = update.callback_query
        song_id = int(query.data.split(":")[1])
        user_id = update.effective_user.id
        
        delete_song(song_id, user_id)
        
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("üìã –ö —Å–ø–∏—Å–∫—É –ø–µ—Å–µ–Ω", callback_data="list_songs")],
            [InlineKeyboardButton("‚Ü©Ô∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ])
        
        await query.edit_message_text("‚úÖ –ü–µ—Å–Ω—è —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!", reply_markup=keyboard)
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–µ—Å–Ω–∏: {e}")

async def check_now_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∏–¥–µ–æ"""
    try:
        query = update.callback_query
        user_id = update.effective_user.id
        
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="check_now")],
            [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="main_menu")]
        ])
        
        await query.edit_message_text("üîç –ò—â—É –Ω–æ–≤—ã–µ –≤–∏–¥–µ–æ...", reply_markup=keyboard)
        
        # –í—Ä–µ–º–µ–Ω–Ω–∞—è —Å–∏–º—É–ª—è—Ü–∏—è
        new_videos = [{
            'song_name': '–¢–µ—Å—Ç–æ–≤–∞—è –ø–µ—Å–Ω—è',
            'video_url': 'https://tiktok.com/test',
            'description': '–¢–µ—Å—Ç–æ–≤–æ–µ –≤–∏–¥–µ–æ'
        }]
        
        if not new_videos:
            text = "üì≠ –ù–æ–≤—ã—Ö –≤–∏–¥–µ–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."
        else:
            text = "üéâ –ù–∞–π–¥–µ–Ω—ã –Ω–æ–≤—ã–µ –≤–∏–¥–µ–æ!\n\n"
            for video in new_videos:
                text += f"üéµ {video['song_name']}\nüìπ {video['description']}\nüîó [–°–º–æ—Ç—Ä–µ—Ç—å –≤–∏–¥–µ–æ]({video['video_url']})\n\n"
        
        await query.edit_message_text(text, reply_markup=keyboard, parse_mode='Markdown')
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–∏–¥–µ–æ: {e}")

async def help_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–º–æ—â—å"""
    help_text = """
‚ÑπÔ∏è *–ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É*

üéµ *–ö–∞–∫ –¥–æ–±–∞–≤–∏—Ç—å –ø–µ—Å–Ω—é*:
1. –ù–∞–π–¥–∏ –ø–µ—Å–Ω—é –≤ TikTok
2. –°–∫–æ–ø–∏—Ä—É–π —Å—Å—ã–ª–∫—É –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–µ—Å–Ω–∏
3. –ü—Ä–∏—à–ª–∏ —Å—Å—ã–ª–∫—É –±–æ—Ç—É

üìπ *–ß—Ç–æ –¥–µ–ª–∞–µ—Ç –±–æ—Ç*:
- –ù–∞—Ö–æ–¥–∏—Ç –≤–∏–¥–µ–æ —Å —ç—Ç–æ–π –ø–µ—Å–Ω–µ–π
- –ü—Ä–∏—Å—ã–ª–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –≤–∏–¥–µ–æ

üí° *–°–æ–≤–µ—Ç—ã*:
- –ò—Å–ø–æ–ª—å–∑—É–π –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –ø–µ—Å–Ω–∏ –∏–∑ TikTok
    """
    
    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="main_menu")]
    ])
    
    await update.callback_query.message.edit_text(help_text, reply_markup=keyboard, parse_mode='Markdown')

async def handle_text_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    try:
        text = update.message.text.strip()
        
        if text.startswith(('https://www.tiktok.com/music/', 'https://vm.tiktok.com/', 'https://tiktok.com/music/')):
            await handle_song_link(update, context, text)
        else:
            await update.message.reply_text(
                "üìé –ü—Ä–∏—à–ª–∏ –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ –ø–µ—Å–Ω—é –≤ TikTok –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è",
                reply_markup=get_main_keyboard()
            )
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞: {e}")

async def handle_song_link(update: Update, context: ContextTypes.DEFAULT_TYPE, link: str):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Å—ã–ª–∫–∏ –Ω–∞ –ø–µ—Å–Ω—é"""
    try:
        await update.message.reply_text("üîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Å—Å—ã–ª–∫—É –Ω–∞ –ø–µ—Å–Ω—é...")
        
        # –í—Ä–µ–º–µ–Ω–Ω–∞—è —Å–∏–º—É–ª—è—Ü–∏—è
        song_name = "–¢–µ—Å—Ç–æ–≤–∞—è –ø–µ—Å–Ω—è"
        song_db_id, is_new = add_song(update.effective_user.id, song_name, link)
        
        if is_new:
            message = f"‚úÖ –ü–µ—Å–Ω—è '{song_name}' –¥–æ–±–∞–≤–ª–µ–Ω–∞! –ù–∞–π–¥–µ–Ω–æ 5 –≤–∏–¥–µ–æ."
        else:
            message = "‚ùå –≠—Ç–∞ –ø–µ—Å–Ω—è —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è."
        
        keyboard = get_main_keyboard()
        await update.message.reply_text(message, reply_markup=keyboard)
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Å—ã–ª–∫–∏: {e}")

async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
    logger.error("Exception while handling an update:", exc_info=context.error)

# ========== –ü–ê–†–°–ò–ù–ì TIKTOK ==========

async def periodic_check(context):
    """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞"""
    logger.info("üîç –ó–∞–ø—É—Å–∫ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏...")

def start_periodic_checking(application):
    """–ó–∞–ø—É—Å–∫ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏"""
    try:
        scheduler = BackgroundScheduler()
        trigger = IntervalTrigger(minutes=30)
        scheduler.add_job(periodic_check, trigger=trigger, args=[application])
        scheduler.start()
        logger.info("‚úÖ –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {e}")

# ========== –ó–ê–ü–£–°–ö –ë–û–¢–ê ==========

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    max_retries = 3
    retry_delay = 10
    
    for attempt in range(max_retries):
        try:
            logger.info(f"üöÄ –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ #{attempt + 1}")
            
            if not BOT_TOKEN or BOT_TOKEN == "your_bot_token_here":
                logger.error("‚ùå BOT_TOKEN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
                if attempt == max_retries - 1:
                    return
                time.sleep(retry_delay)
                continue
                
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
            init_db()
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
            application = Application.builder().token(BOT_TOKEN).build()
            
            # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
            application.add_handler(CommandHandler("start", start))
            application.add_handler(CallbackQueryHandler(handle_menu_callback))
            application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text_message))
            
            # –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
            start_periodic_checking(application)
            
            # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
            application.add_error_handler(error_handler)
            
            # –ó–∞–ø—É—Å–∫
            logger.info("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
            application.run_polling()
            break
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}): {e}")
            if attempt == max_retries - 1:
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞")
                break
            time.sleep(retry_delay)

if __name__ == "__main__":
    main()
