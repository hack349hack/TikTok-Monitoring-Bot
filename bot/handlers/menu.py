from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import ContextTypes
from bot.services.database import get_user_songs, delete_song, get_song_videos
from bot.services.tiktok_parser import check_new_videos_for_user

def get_main_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üéµ –î–æ–±–∞–≤–∏—Ç—å –ø–µ—Å–Ω—é –ø–æ —Å—Å—ã–ª–∫–µ", callback_data="add_song")],
        [InlineKeyboardButton("üìã –ú–æ–∏ –ø–µ—Å–Ω–∏", callback_data="list_songs")],
        [InlineKeyboardButton("üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–µ–π—á–∞—Å", callback_data="check_now")],
        [InlineKeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data="help")]
    ])

async def handle_menu_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –æ—Ç –∫–Ω–æ–ø–æ–∫"""
    query = update.callback_query
    await query.answer()
    
    data = query.data
    
    if data == "main_menu":
        await main_menu(update, context)
    
    elif data == "add_song":
        await add_song_handler(update, context)
    
    elif data == "list_songs":
        await list_songs_handler(update, context)
    
    elif data == "check_now":
        await check_now_handler(update, context)
    
    elif data == "help":
        await help_handler(update, context)
    
    elif data.startswith("delete_song:"):
        await delete_song_handler(update, context)
    
    elif data.startswith("show_videos:"):
        await show_videos_handler(update, context)
    
    elif data == "back_to_songs":
        await list_songs_handler(update, context)

async def main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏"""
    text = "üì± –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:"
    await update.callback_query.message.edit_text(text, reply_markup=get_main_keyboard())

async def add_song_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–µ—Å–Ω–∏"""
    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="main_menu")]
    ])
    
    text = "üéµ –ü—Ä–∏—à–ª–∏ –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ –ø–µ—Å–Ω—é –≤ TikTok\n\n–ü—Ä–∏–º–µ—Ä:\nhttps://www.tiktok.com/music/–Ω–∞–∑–≤–∞–Ω–∏–µ-–ø–µ—Å–Ω–∏-723415689123"
    await update.callback_query.message.edit_text(text, reply_markup=keyboard)

async def list_songs_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–ø–∏—Å–∫–∞ –ø–µ—Å–µ–Ω"""
    user_id = update.effective_user.id
    songs = get_user_songs(user_id)
    
    if not songs:
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("üéµ –î–æ–±–∞–≤–∏—Ç—å –ø–µ—Å–Ω—é", callback_data="add_song")],
            [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="main_menu")]
        ])
        await update.callback_query.message.edit_text(
            "üìã –£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –ø–µ—Å–µ–Ω.", 
            reply_markup=keyboard
        )
        return
    
    text = "üìã –¢–≤–æ–∏ –ø–µ—Å–Ω–∏:\n\n"
    keyboard_buttons = []
    
    for song in songs:
        song_id, name, song_url, created_at, last_check = song
        text += f"üéµ {name}\nüîó {song_url}\nüìÖ –î–æ–±–∞–≤–ª–µ–Ω–∞: {created_at[:10]}\n\n"
        
        keyboard_buttons.append([
            InlineKeyboardButton(f"üìπ –í–∏–¥–µ–æ {name}", callback_data=f"show_videos:{song_id}"),
            InlineKeyboardButton(f"‚ùå –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_song:{song_id}")
        ])
    
    keyboard_buttons.append([InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="main_menu")])
    keyboard = InlineKeyboardMarkup(keyboard_buttons)
    
    await update.callback_query.message.edit_text(text, reply_markup=keyboard)

async def show_videos_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤–∏–¥–µ–æ –¥–ª—è –ø–µ—Å–Ω–∏"""
    query = update.callback_query
    song_id = int(query.data.split(":")[1])
    user_id = update.effective_user.id
    
    videos = get_song_videos(song_id, user_id)
    
    if not videos:
        text = "üì≠ –í–∏–¥–µ–æ –¥–ª—è —ç—Ç–æ–π –ø–µ—Å–Ω–∏ –ø–æ–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."
    else:
        text = "üé¨ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –≤–∏–¥–µ–æ:\n\n"
        for i, video in enumerate(videos[:5], 1):
            video_id, video_url, description, created_at = video
            text += f"{i}. {description}\n"
            text += f"üîó [–°–º–æ—Ç—Ä–µ—Ç—å –≤–∏–¥–µ–æ]({video_url})\n"
            text += f"üìÖ {created_at[:10]}\n\n"
    
    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("‚Ü©Ô∏è –ö —Å–ø–∏—Å–∫—É –ø–µ—Å–µ–Ω", callback_data="list_songs")],
        [InlineKeyboardButton("‚Ü©Ô∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ])
    
    await query.edit_message_text(text, reply_markup=keyboard, parse_mode='Markdown')

async def delete_song_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è –ø–µ—Å–Ω–∏"""
    query = update.callback_query
    song_id = int(query.data.split(":")[1])
    user_id = update.effective_user.id
    
    delete_song(song_id, user_id)
    
    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("üìã –ö —Å–ø–∏—Å–∫—É –ø–µ—Å–µ–Ω", callback_data="list_songs")],
        [InlineKeyboardButton("‚Ü©Ô∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ])
    
    await query.edit_message_text("‚úÖ –ü–µ—Å–Ω—è —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!", reply_markup=keyboard)

async def check_now_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–∏–¥–µ–æ"""
    query = update.callback_query
    user_id = update.effective_user.id
    
    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="check_now")],
        [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="main_menu")]
    ])
    
    await query.edit_message_text("üîç –ò—â—É –Ω–æ–≤—ã–µ –≤–∏–¥–µ–æ...", reply_markup=keyboard)
    
    new_videos = await check_new_videos_for_user(user_id)
    
    if not new_videos:
        text = "üì≠ –ù–æ–≤—ã—Ö –≤–∏–¥–µ–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."
    else:
        text = "üéâ –ù–∞–π–¥–µ–Ω—ã –Ω–æ–≤—ã–µ –≤–∏–¥–µ–æ!\n\n"
        for video in new_videos[:5]:
            text += f"üéµ {video['song_name']}\n"
            text += f"üìπ {video['description']}\n"
            text += f"üîó [–°–º–æ—Ç—Ä–µ—Ç—å –≤–∏–¥–µ–æ]({video['video_url']})\n\n"
        
        if len(new_videos) > 5:
            text += f"–ò –µ—â—ë {len(new_videos) - 5} –≤–∏–¥–µ–æ...\n"
    
    await query.edit_message_text(text, reply_markup=keyboard, parse_mode='Markdown')

async def help_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–º–æ—â–∏"""
    help_text = """
‚ÑπÔ∏è *–ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É*

üéµ *–ö–∞–∫ –¥–æ–±–∞–≤–∏—Ç—å –ø–µ—Å–Ω—é*:
1. –ù–∞–π–¥–∏ –ø–µ—Å–Ω—é –≤ TikTok
2. –°–∫–æ–ø–∏—Ä—É–π —Å—Å—ã–ª–∫—É –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–µ—Å–Ω–∏
3. –ü—Ä–∏—à–ª–∏ —Å—Å—ã–ª–∫—É –±–æ—Ç—É

–ü—Ä–∏–º–µ—Ä—ã —Å—Å—ã–ª–æ–∫:
‚Ä¢ https://www.tiktok.com/music/–Ω–∞–∑–≤–∞–Ω–∏–µ-–ø–µ—Å–Ω–∏-723415689123
‚Ä¢ https://vm.tiktok.com/music/–ø–µ—Å–Ω—è-123456789

üìπ *–ß—Ç–æ –¥–µ–ª–∞–µ—Ç –±–æ—Ç*:
- –ù–∞—Ö–æ–¥–∏—Ç –≤—Å–µ –≤–∏–¥–µ–æ —Å —ç—Ç–æ–π –ø–µ—Å–Ω–µ–π
- –°–æ—Ä—Ç–∏—Ä—É–µ—Ç –ø–æ –¥–∞—Ç–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
- –ü—Ä–∏—Å—ã–ª–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ –≤–∏–¥–µ–æ
- –ü–æ—Å—Ç–æ—è–Ω–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–æ–≤—ã–µ –≤–∏–¥–µ–æ
- –ü—Ä–∏—Å—ã–ª–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –≤–∏–¥–µ–æ

üí° *–°–æ–≤–µ—Ç—ã*:
- –ò—Å–ø–æ–ª—å–∑—É–π –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –ø–µ—Å–Ω–∏ –∏–∑ TikTok
- –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –ª—É—á—à–µ —Å –ø–æ–ø—É–ª—è—Ä–Ω—ã–º–∏ –ø–µ—Å–Ω—è–º–∏
- –ù–æ–≤—ã–µ –≤–∏–¥–µ–æ –ø—Ä–æ–≤–µ—Ä—è—é—Ç—Å—è –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç
    """
    
    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="main_menu")]
    ])
    
    await update.callback_query.message.edit_text(
        help_text, 
        reply_markup=keyboard, 
        parse_mode='Markdown'
    )
