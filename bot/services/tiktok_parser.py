import requests
from bs4 import BeautifulSoup
import logging
import re
from datetime import datetime
import asyncio
from apscheduler.schedulers.background import BackgroundScheduler
from apscheduler.triggers.interval import IntervalTrigger

from bot.services.database import (
    add_song, add_video, get_video_exists, 
    update_song_last_check, get_all_songs
)

logger = logging.getLogger(__name__)

def extract_song_info_from_url(song_url):
    """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–µ—Å–Ω–µ –∏–∑ URL"""
    try:
        # –ü—Ä–∏–º–µ—Ä: https://www.tiktok.com/music/song-name-723415689123
        match = re.search(r'music/([^/]+?-(\d+))', song_url)
        if match:
            song_id = match.group(2)
            song_name = match.group(1).replace(f"-{song_id}", "").replace("-", " ")
            return song_name.title(), song_id
        
        # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
        match = re.search(r'music/[^/]+?--(\d+)', song_url)
        if match:
            song_id = match.group(1)
            # –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–∑ URL
            name_match = re.search(r'music/([^/-]+)', song_url)
            song_name = name_match.group(1) if name_match else f"–ü–µ—Å–Ω—è {song_id}"
            return song_name.title(), song_id
            
        return None, None
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏–∑ URL: {e}")
        return None, None

async def process_song_link(user_id, song_url):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Å—ã–ª–∫–∏ –Ω–∞ –ø–µ—Å–Ω—é"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Å—Å—ã–ª–∫–∏
        if not song_url.startswith(('https://www.tiktok.com/music/', 'https://vm.tiktok.com/', 'https://tiktok.com/music/')):
            return False, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Å—ã–ª–∫–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –ø–µ—Å–Ω—é –∏–∑ TikTok."
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–µ—Å–Ω–µ
        song_name, song_id = extract_song_info_from_url(song_url)
        if not song_name or not song_id:
            return False, "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –ø–µ—Å–Ω—é –∏–∑ —Å—Å—ã–ª–∫–∏."
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Å–Ω—é –≤ –±–∞–∑—É
        song_db_id, is_new = add_song(user_id, song_name, song_url)
        
        if not is_new:
            return False, "–≠—Ç–∞ –ø–µ—Å–Ω—è —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è."
        
        # –ò—â–µ–º –≤–∏–¥–µ–æ –¥–ª—è —ç—Ç–æ–π –ø–µ—Å–Ω–∏
        videos = await get_videos_for_song(song_url, song_db_id)
        
        return True, f"‚úÖ –ü–µ—Å–Ω—è '{song_name}' –¥–æ–±–∞–≤–ª–µ–Ω–∞! –ù–∞–π–¥–µ–Ω–æ {len(videos)} –≤–∏–¥–µ–æ."
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Å—ã–ª–∫–∏: {e}")
        return False, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Å—ã–ª–∫–∏."

async def get_videos_for_song(song_url, song_db_id):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤–∏–¥–µ–æ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ø–µ—Å–Ω–∏"""
    try:
        headers = {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36',
            'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',
            'Accept-Language': 'en-US,en;q=0.5',
            'Accept-Encoding': 'gzip, deflate, br',
            'DNT': '1',
            'Connection': 'keep-alive',
            'Upgrade-Insecure-Requests': '1',
            'Sec-Fetch-Dest': 'document',
            'Sec-Fetch-Mode': 'navigate',
            'Sec-Fetch-Site': 'none',
            'Sec-Fetch-User': '?1',
        }
        
        logger.info(f"–ü–∞—Ä—Å–∏–º —Å—Ç—Ä–∞–Ω–∏—Ü—É: {song_url}")
        response = requests.get(song_url, headers=headers, timeout=30)
        
        if response.status_code == 200:
            soup = BeautifulSoup(response.text, 'html.parser')
            videos = []
            
            # –ò—â–µ–º –≤–∏–¥–µ–æ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –ø–µ—Å–Ω–∏
            video_elements = soup.find_all('div', {'data-e2e': 'recommend-list-item'})
            
            # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø–æ data-e2e, –∏—â–µ–º –ø–æ –∫–ª–∞—Å—Å–∞–º
            if not video_elements:
                video_elements = soup.find_all('div', class_='tiktok-item')
            
            logger.info(f"–ù–∞–π–¥–µ–Ω–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤: {len(video_elements)}")
            
            for element in video_elements[:20]:
                try:
                    video_link = element.find('a')
                    if video_link and video_link.get('href'):
                        href = video_link.get('href')
                        if not href.startswith('http'):
                            video_url = f"https://www.tiktok.com{href}"
                        else:
                            video_url = href
                        
                        # –û–ø–∏—Å–∞–Ω–∏–µ –≤–∏–¥–µ–æ
                        description = "–í–∏–¥–µ–æ —Å –ø–µ—Å–Ω–µ–π"
                        desc_elements = element.find_all(['div', 'p', 'span'])
                        for desc_elem in desc_elements:
                            text = desc_elem.get_text(strip=True)
                            if text and len(text) > 10:
                                description = text
                                break
                        
                        if len(description) > 200:
                            description = description[:200] + '...'
                        
                        # –î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
                        posted_at = datetime.now()
                        
                        # –ú–∏–Ω–∏–∞—Ç—é—Ä–∞
                        thumbnail = None
                        img = element.find('img')
                        if img and img.get('src'):
                            thumbnail = img['src']
                        
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–∏–¥–µ–æ, –µ—Å–ª–∏ –µ–≥–æ –µ—â–µ –Ω–µ—Ç
                        if not get_video_exists(video_url):
                            if add_video(song_db_id, video_url, thumbnail, description, posted_at):
                                videos.append({
                                    'url': video_url,
                                    'description': description
                                })
                                logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω–æ –≤–∏–¥–µ–æ: {description}")
                            
                except Exception as e:
                    logger.debug(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤–∏–¥–µ–æ —ç–ª–µ–º–µ–Ω—Ç–∞: {e}")
                    continue
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
            update_song_last_check(song_db_id)
            
            logger.info(f"–£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –≤–∏–¥–µ–æ: {len(videos)}")
            return videos
            
        else:
            logger.warning(f"HTTP –æ—à–∏–±–∫–∞ {response.status_code} –¥–ª—è –ø–µ—Å–Ω–∏: {song_url}")
            return []
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤–∏–¥–µ–æ –¥–ª—è –ø–µ—Å–Ω–∏: {e}")
        return []

async def check_new_videos_for_user(user_id):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö –≤–∏–¥–µ–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    from bot.services.database import get_user_songs
    songs = get_user_songs(user_id)
    new_videos = []
    
    for song in songs:
        song_id, name, song_url, created_at, last_check = song
        logger.info(f"–ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Å–Ω—é: {name}")
        
        videos = await get_videos_for_song(song_url, song_id)
        
        for video in videos:
            new_videos.append({
                'song_name': name,
                'video_url': video['url'],
                'description': video['description']
            })
            logger.info(f"–ù–∞–π–¥–µ–Ω–æ –Ω–æ–≤–æ–µ –≤–∏–¥–µ–æ –¥–ª—è –ø–µ—Å–Ω–∏ {name}")
    
    return new_videos

async def periodic_check(context):
    """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö –≤–∏–¥–µ–æ"""
    logger.info("–ó–∞–ø—É—Å–∫ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–∏–¥–µ–æ...")
    
    songs = get_all_songs()
    for song in songs:
        song_id, user_id, name, song_url = song
        try:
            videos = await get_videos_for_song(song_url, song_id)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –≤–∏–¥–µ–æ
            for video in videos:
                try:
                    await context.bot.send_message(
                        chat_id=user_id,
                        text=f"üéâ –ù–æ–≤–æ–µ –≤–∏–¥–µ–æ —Å –≤–∞—à–µ–π –ø–µ—Å–Ω–µ–π!\n\n"
                             f"üéµ {name}\n"
                             f"üìπ {video['description']}\n"
                             f"üîó [–°–º–æ—Ç—Ä–µ—Ç—å –≤–∏–¥–µ–æ]({video['url']})",
                        parse_mode='Markdown'
                    )
                    # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
                    await asyncio.sleep(1)
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
                    
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–µ—Å–Ω–∏ {name}: {e}")

def start_periodic_checking(application):
    """–ó–∞–ø—É—Å–∫ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏"""
    scheduler = BackgroundScheduler()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç
    trigger = IntervalTrigger(minutes=30)
    scheduler.add_job(
        periodic_check,
        trigger=trigger,
        args=[application]
    )
    
    scheduler.start()
    logger.info("–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞ (–∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç)")
